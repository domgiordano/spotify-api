import { r as registerInstance, c as createEvent, h, H as Host } from './index-4b4a2e3a.js';
var spotifyLoginCss = "";
var SpotifyLogin = /** @class */ (function () {
    function SpotifyLogin(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Scope for Spotify OAuth application
         */
        this.responseType = "token";
        this.urlSpotify = "https://accounts.spotify.com/authorize";
        this.interval = 0;
        this.request = createEvent(this, "request", 7);
        this.completed = createEvent(this, "completed", 7);
        this.fail = createEvent(this, "fail", 7);
    }
    SpotifyLogin.prototype.validateClientId = function (newValue) {
        if (!newValue) {
            throw new Error("clientId: required");
        }
    };
    SpotifyLogin.prototype.validateRedirectUri = function (newValue) {
        if (!newValue) {
            throw new Error("redirectUri: required");
        }
    };
    SpotifyLogin.prototype.validateResponseType = function (newValue) {
        if (!newValue) {
            throw new Error("responseType: required");
        }
    };
    SpotifyLogin.prototype.convertQueryParams = function (url) {
        var query = url.substr(1);
        var result = {};
        query.split("&").forEach(function (param) {
            var item = param.split("=");
            result[item[0]] = decodeURIComponent(item[1]);
        });
        return result;
    };
    SpotifyLogin.prototype.close = function () {
        if (this.interval) {
            window.clearInterval(this.interval);
            this.interval = null;
        }
        this.popup.close();
    };
    SpotifyLogin.prototype.poll = function () {
        var _this = this;
        this.interval = window.setInterval(function () {
            try {
                if (!_this.popup || _this.popup.closed !== false) {
                    _this.close();
                    _this.fail.emit(new Error("The popup was closed"));
                    return;
                }
                if (_this.popup.location.href === _this.urlSpotify ||
                    _this.popup.location.pathname === "blank") {
                    return;
                }
                _this.completed.emit(_this.convertQueryParams(_this.popup.location.hash));
                _this.close();
            }
            catch (error) {
                //this.fail.emit(error);
            }
        }, 500);
    };
    SpotifyLogin.prototype.onBtnClick = function () {
        var urlParams = "client_id=" + this.clientId + "&redirect_uri=" + this.redirectUri + "&response_type=" + this.responseType;
        if (this.scope) {
            urlParams += "&scope=" + this.scope;
        }
        if (this.state) {
            urlParams += "&state=" + this.state;
        }
        if (this.showDialog) {
            urlParams += "&show_dialog=" + this.showDialog;
        }
        this.popup = window.open(this.urlSpotify + "?" + urlParams, "spotify-authorization", "");
        this.request.emit();
        this.poll();
    };
    SpotifyLogin.prototype.render = function () {
        var _this = this;
        return (h(Host, { onClick: function () { return _this.onBtnClick(); } }, h("slot", null)));
    };
    Object.defineProperty(SpotifyLogin, "watchers", {
        get: function () {
            return {
                "clientId": ["validateClientId"],
                "redirectUri": ["validateRedirectUri"],
                "responseType": ["validateResponseType"]
            };
        },
        enumerable: true,
        configurable: true
    });
    return SpotifyLogin;
}());
SpotifyLogin.style = spotifyLoginCss;
export { SpotifyLogin as spotify_login };
