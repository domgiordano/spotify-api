import { r as registerInstance, c as createEvent, h, H as Host } from './index-4b4a2e3a.js';

const spotifyLoginCss = "";

const SpotifyLogin = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Scope for Spotify OAuth application
         */
        this.responseType = "token";
        this.urlSpotify = "https://accounts.spotify.com/authorize";
        this.interval = 0;
        this.request = createEvent(this, "request", 7);
        this.completed = createEvent(this, "completed", 7);
        this.fail = createEvent(this, "fail", 7);
    }
    validateClientId(newValue) {
        if (!newValue) {
            throw new Error("clientId: required");
        }
    }
    validateRedirectUri(newValue) {
        if (!newValue) {
            throw new Error("redirectUri: required");
        }
    }
    validateResponseType(newValue) {
        if (!newValue) {
            throw new Error("responseType: required");
        }
    }
    convertQueryParams(url) {
        const query = url.substr(1);
        const result = {};
        query.split("&").forEach(param => {
            const item = param.split("=");
            result[item[0]] = decodeURIComponent(item[1]);
        });
        return result;
    }
    close() {
        if (this.interval) {
            window.clearInterval(this.interval);
            this.interval = null;
        }
        this.popup.close();
    }
    poll() {
        this.interval = window.setInterval(() => {
            try {
                if (!this.popup || this.popup.closed !== false) {
                    this.close();
                    this.fail.emit(new Error("The popup was closed"));
                    return;
                }
                if (this.popup.location.href === this.urlSpotify ||
                    this.popup.location.pathname === "blank") {
                    return;
                }
                this.completed.emit(this.convertQueryParams(this.popup.location.hash));
                this.close();
            }
            catch (error) {
                //this.fail.emit(error);
            }
        }, 500);
    }
    onBtnClick() {
        let urlParams = `client_id=${this.clientId}&redirect_uri=${this.redirectUri}&response_type=${this.responseType}`;
        if (this.scope) {
            urlParams += `&scope=${this.scope}`;
        }
        if (this.state) {
            urlParams += `&state=${this.state}`;
        }
        if (this.showDialog) {
            urlParams += `&show_dialog=${this.showDialog}`;
        }
        this.popup = window.open(`${this.urlSpotify}?${urlParams}`, "spotify-authorization", "");
        this.request.emit();
        this.poll();
    }
    render() {
        return (h(Host, { onClick: () => this.onBtnClick() }, h("slot", null)));
    }
    static get watchers() { return {
        "clientId": ["validateClientId"],
        "redirectUri": ["validateRedirectUri"],
        "responseType": ["validateResponseType"]
    }; }
};
SpotifyLogin.style = spotifyLoginCss;

export { SpotifyLogin as spotify_login };
