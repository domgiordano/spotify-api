import{r as t,c as i,h as s,H as e}from"./p-5b720dea.js";const r=class{constructor(s){t(this,s),this.responseType="token",this.urlSpotify="https://accounts.spotify.com/authorize",this.interval=0,this.request=i(this,"request",7),this.completed=i(this,"completed",7),this.fail=i(this,"fail",7)}validateClientId(t){if(!t)throw new Error("clientId: required")}validateRedirectUri(t){if(!t)throw new Error("redirectUri: required")}validateResponseType(t){if(!t)throw new Error("responseType: required")}convertQueryParams(t){const i=t.substr(1),s={};return i.split("&").forEach(t=>{const i=t.split("=");s[i[0]]=decodeURIComponent(i[1])}),s}close(){this.interval&&(window.clearInterval(this.interval),this.interval=null),this.popup.close()}poll(){this.interval=window.setInterval(()=>{try{if(!this.popup||!1!==this.popup.closed)return this.close(),void this.fail.emit(new Error("The popup was closed"));if(this.popup.location.href===this.urlSpotify||"blank"===this.popup.location.pathname)return;this.completed.emit(this.convertQueryParams(this.popup.location.hash)),this.close()}catch(t){}},500)}onBtnClick(){let t=`client_id=${this.clientId}&redirect_uri=${this.redirectUri}&response_type=${this.responseType}`;this.scope&&(t+=`&scope=${this.scope}`),this.state&&(t+=`&state=${this.state}`),this.showDialog&&(t+=`&show_dialog=${this.showDialog}`),this.popup=window.open(`${this.urlSpotify}?${t}`,"spotify-authorization",""),this.request.emit(),this.poll()}render(){return s(e,{onClick:()=>this.onBtnClick()},s("slot",null))}static get watchers(){return{clientId:["validateClientId"],redirectUri:["validateRedirectUri"],responseType:["validateResponseType"]}}};r.style="";export{r as spotify_login}