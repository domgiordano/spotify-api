import { Component, Watch, Prop, State, Event, h, Host } from "@stencil/core";
export class SpotifyLogin {
    constructor() {
        /**
         * Scope for Spotify OAuth application
         */
        this.responseType = "token";
        this.urlSpotify = "https://accounts.spotify.com/authorize";
        this.interval = 0;
    }
    validateClientId(newValue) {
        if (!newValue) {
            throw new Error("clientId: required");
        }
    }
    validateRedirectUri(newValue) {
        if (!newValue) {
            throw new Error("redirectUri: required");
        }
    }
    validateResponseType(newValue) {
        if (!newValue) {
            throw new Error("responseType: required");
        }
    }
    convertQueryParams(url) {
        const query = url.substr(1);
        const result = {};
        query.split("&").forEach(param => {
            const item = param.split("=");
            result[item[0]] = decodeURIComponent(item[1]);
        });
        return result;
    }
    close() {
        if (this.interval) {
            window.clearInterval(this.interval);
            this.interval = null;
        }
        this.popup.close();
    }
    poll() {
        this.interval = window.setInterval(() => {
            try {
                if (!this.popup || this.popup.closed !== false) {
                    this.close();
                    this.fail.emit(new Error("The popup was closed"));
                    return;
                }
                if (this.popup.location.href === this.urlSpotify ||
                    this.popup.location.pathname === "blank") {
                    return;
                }
                this.completed.emit(this.convertQueryParams(this.popup.location.hash));
                this.close();
            }
            catch (error) {
                //this.fail.emit(error);
            }
        }, 500);
    }
    onBtnClick() {
        let urlParams = `client_id=${this.clientId}&redirect_uri=${this.redirectUri}&response_type=${this.responseType}`;
        if (this.scope) {
            urlParams += `&scope=${this.scope}`;
        }
        if (this.state) {
            urlParams += `&state=${this.state}`;
        }
        if (this.showDialog) {
            urlParams += `&show_dialog=${this.showDialog}`;
        }
        this.popup = window.open(`${this.urlSpotify}?${urlParams}`, "spotify-authorization", "");
        this.request.emit();
        this.poll();
    }
    render() {
        return (h(Host, { onClick: () => this.onBtnClick() },
            h("slot", null)));
    }
    static get is() { return "spotify-login"; }
    static get encapsulation() { return "shadow"; }
    static get originalStyleUrls() { return {
        "$": ["spotify-login.css"]
    }; }
    static get styleUrls() { return {
        "$": ["spotify-login.css"]
    }; }
    static get properties() { return {
        "clientId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Client ID for Spotify OAuth application"
            },
            "attribute": "client-id",
            "reflect": false
        },
        "redirectUri": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The URI to redirect to after the user grants or denies permission."
            },
            "attribute": "redirect-uri",
            "reflect": false
        },
        "responseType": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Scope for Spotify OAuth application"
            },
            "attribute": "response-type",
            "reflect": false,
            "defaultValue": "\"token\""
        },
        "scope": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Scope for Spotify OAuth application"
            },
            "attribute": "scope",
            "reflect": false
        },
        "state": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "The state can be useful for correlating requests and responses"
            },
            "attribute": "state",
            "reflect": false
        },
        "showDialog": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Whether or not to force the user to approve the app again if they\u2019ve already done so."
            },
            "attribute": "show-dialog",
            "reflect": false
        }
    }; }
    static get states() { return {
        "urlSpotify": {},
        "popup": {},
        "interval": {}
    }; }
    static get events() { return [{
            "method": "request",
            "name": "request",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Call with request"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "completed",
            "name": "completed",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Call with success"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "fail",
            "name": "fail",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "Call with error"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }]; }
    static get watchers() { return [{
            "propName": "clientId",
            "methodName": "validateClientId"
        }, {
            "propName": "redirectUri",
            "methodName": "validateRedirectUri"
        }, {
            "propName": "responseType",
            "methodName": "validateResponseType"
        }]; }
}
